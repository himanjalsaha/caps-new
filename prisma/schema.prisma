// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String   @unique
  emailVerified DateTime?
  image     String?
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  profile   Profile?
  hasProfile    Boolean   @default(false) 
  accounts      Account[]
  sessions      Session[]
  doubtPosts    DoubtPost[]   @relation("UserDoubtPosts")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  name       String?
  campus     String?
  department String?
  course     String?
  semester   String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt
}

model DoubtPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String 
  description String
  tags        String[]
  imgUrl      String[]
  userId      String   @db.ObjectId
  user        User     @relation("UserDoubtPosts", fields: [userId], references: [id])
  userName    String
  userRole    String
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  likes       String[] // Array of user IDs who liked the post
  answers     Json[]   // Array of answer objects
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}